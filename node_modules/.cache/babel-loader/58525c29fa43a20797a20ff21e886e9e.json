{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Projects\\\\Sorting-Sight-main\\\\src\\\\Algorithms\\\\SelectionSort.js\";\nimport React from 'react';\nimport { newTrace, addToTrace, lastSorted, swap, createKey } from './helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectionSort = nums => {\n  // setup code for tracing the algo\n  const trace = newTrace(nums); // selection sort algo with trace capture\n\n  for (let i = 0; i < nums.length; i++) {\n    let indexOfMin = i;\n\n    for (let j = i + 1; j < nums.length; j++) {\n      // visualize - compare A[indexOfMin] and A[j]\n      addToTrace(trace, nums, lastSorted(trace), [indexOfMin, j]);\n\n      if (nums[j] < nums[indexOfMin]) {\n        // visualized - new min discovered\n        addToTrace(trace, nums, lastSorted(trace), [indexOfMin], [j]);\n        indexOfMin = j;\n        addToTrace(trace, nums, lastSorted(trace), [indexOfMin], [j]);\n      }\n    } // visualize - i'th value to be swapped with min value\n\n\n    addToTrace(trace, nums, lastSorted(trace), [], [i, indexOfMin]); // visualize - swap\n\n    swap(nums, i, indexOfMin); // visualize - i'th value has been swapped with min value\n\n    addToTrace(trace, nums, [...lastSorted(trace), i], [], []);\n  } // visualize final trace\n\n\n  addToTrace(trace, nums, [...lastSorted(trace), nums.length - 1]);\n  console.log(`trace for selection sort: ${trace}`);\n  return trace;\n};\n\n_c = SelectionSort;\nexport const SelectionSortKey = createKey('Comparing', 'Swapping');\nexport const SelectionSortDesc = {\n  title: 'Selection Sort',\n  description: /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://en.wikipedia.org/wiki/Selection_sort\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      children: \"Selection Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), ' ', \"is also known as the \\\"Prove Me Wrong\\\" algorithm.  It is an in-place comparison sorting algorithm that divides the input list into two parts: the sublist of items already sorted, which is built up from left to right at the front (left) of the list, and the sublist of items remaining to be sorted that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 7\n  }, this),\n  worstCase: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"O(n\", /*#__PURE__*/_jsxDEV(\"sup\", {\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this), \")\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 7\n  }, this),\n  avgCase: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"O(n\", /*#__PURE__*/_jsxDEV(\"sup\", {\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 12\n    }, this), \")\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 7\n  }, this),\n  bestCase: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"O(n\", /*#__PURE__*/_jsxDEV(\"sup\", {\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }, this), \")\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 7\n  }, this),\n  space: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"O(1)\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 12\n  }, this)\n};\nexport default SelectionSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectionSort\");","map":{"version":3,"sources":["C:/Users/hp/Desktop/Projects/Sorting-Sight-main/src/Algorithms/SelectionSort.js"],"names":["React","newTrace","addToTrace","lastSorted","swap","createKey","SelectionSort","nums","trace","i","length","indexOfMin","j","console","log","SelectionSortKey","SelectionSortDesc","title","description","worstCase","avgCase","bestCase","space"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { newTrace, addToTrace, lastSorted, swap, createKey } from './helpers';\n\nconst SelectionSort = (nums) => {\n    // setup code for tracing the algo\n    const trace = newTrace(nums);\n\n    // selection sort algo with trace capture\n    for(let i = 0; i < nums.length; i++) {\n        let indexOfMin = i;\n\n        for(let j = i+1; j < nums.length; j++) {\n            // visualize - compare A[indexOfMin] and A[j]\n            addToTrace(trace, nums, lastSorted(trace), [indexOfMin, j]);\n\n            if(nums[j] < nums[indexOfMin]) {\n                // visualized - new min discovered\n                addToTrace(trace, nums, lastSorted(trace), [indexOfMin], [j]);\n                indexOfMin = j;\n                addToTrace(trace, nums, lastSorted(trace), [indexOfMin], [j]);\n            } \n        }\n        \n        // visualize - i'th value to be swapped with min value\n        addToTrace(trace, nums, lastSorted(trace), [], [i, indexOfMin]);\n\n        // visualize - swap\n        swap(nums, i, indexOfMin);\n\n        // visualize - i'th value has been swapped with min value\n        addToTrace(trace, nums, [...lastSorted(trace), i], [], []);\n        \n    }\n\n    // visualize final trace\n    addToTrace(trace, nums, [...lastSorted(trace), nums.length - 1]);\n\n    console.log(`trace for selection sort: ${trace}`);\n    return trace;\n};\n\nexport const SelectionSortKey = createKey('Comparing', 'Swapping');\n\nexport const SelectionSortDesc = {\n    title: 'Selection Sort',\n    description: (\n      <p>\n        <a\n          href=\"https://en.wikipedia.org/wiki/Selection_sort\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Selection Sort\n        </a>{' '}\n        is also known as the \"Prove Me Wrong\" algorithm.  It is an in-place comparison sorting algorithm that divides the input\n        list into two parts: the sublist of items already sorted, which is built up from left to right at the front (left) of the list, and the sublist of items remaining to be sorted that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right.\n      </p>\n    ),\n    worstCase: (\n      <span>\n        O(n<sup>2</sup>)\n      </span>\n    ),\n    avgCase: (\n      <span>\n        O(n<sup>2</sup>)\n      </span>\n    ),\n    bestCase: (\n      <span>\n        O(n<sup>2</sup>)\n      </span>\n    ),\n    space: <span>O(1)</span>\n};\n\nexport default SelectionSort;"]},"metadata":{},"sourceType":"module"}