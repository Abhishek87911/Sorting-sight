{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Projects\\\\Sorting-Sight-main\\\\src\\\\Algorithms\\\\BubbleSort.js\";\nimport React from 'react';\nimport { newTrace, addToTrace, lastSorted, swap, createKey } from './helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BubbleSort = nums => {\n  // setup code for tracing the algo\n  const trace = newTrace(nums); // bubble sort algo with trace capture\n\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 0; j < nums.length - i - 1; j++) {\n      // visualize - compare A[j] and A[j + 1]\n      addToTrace(trace, nums, lastSorted(trace), [j, j + 1]);\n\n      if (nums[j] > nums[j + 1]) {\n        swap(nums, j, j + 1); // visualize - swap A[j] and A[j + 1]\n\n        addToTrace(trace, nums, lastSorted(trace), [], [j, j + 1]);\n      }\n    } // visualize - final value is sorted\n\n\n    addToTrace(trace, nums, [...lastSorted(trace), nums.length - 1 - i]);\n  }\n\n  return trace;\n};\n\n_c = BubbleSort;\nexport const BubbleSortKey = createKey('Comparing', 'Swapping');\nexport const BubbleSortDesc = {\n  title: 'Bubble Sort',\n  description: /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://en.wikipedia.org/wiki/Bubble_sort\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      children: \"Bubble Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }, this), ' ', \"is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller or larger elements \\\"bubble\\\" to the top of the list. Although the algorithm is simple, it is too slow and impractical for most problems\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this),\n  worstCase: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"O(n\", /*#__PURE__*/_jsxDEV(\"sup\", {\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 14\n    }, this), \")\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this),\n  avgCase: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"O(n\", /*#__PURE__*/_jsxDEV(\"sup\", {\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 14\n    }, this), \")\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this),\n  bestCase: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"O(n)\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 17\n  }, this),\n  space: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"O(1)\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 14\n  }, this)\n};\nexport default BubbleSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"BubbleSort\");","map":{"version":3,"sources":["C:/Users/hp/Desktop/Projects/Sorting-Sight-main/src/Algorithms/BubbleSort.js"],"names":["React","newTrace","addToTrace","lastSorted","swap","createKey","BubbleSort","nums","trace","i","length","j","BubbleSortKey","BubbleSortDesc","title","description","worstCase","avgCase","bestCase","space"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,UAA/B,EAA2CC,IAA3C,EAAiDC,SAAjD,QAAkE,WAAlE;;;AAEA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AACzB;AACA,QAAMC,KAAK,GAAGP,QAAQ,CAACM,IAAD,CAAtB,CAFyB,CAIzB;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACG,MAAL,GAAcD,CAAd,GAAkB,CAAtC,EAAyCE,CAAC,EAA1C,EAA8C;AAC1C;AACAT,MAAAA,UAAU,CAACM,KAAD,EAAQD,IAAR,EAAcJ,UAAU,CAACK,KAAD,CAAxB,EAAiC,CAACG,CAAD,EAAIA,CAAC,GAAG,CAAR,CAAjC,CAAV;;AAEA,UAAGJ,IAAI,CAACI,CAAD,CAAJ,GAAUJ,IAAI,CAACI,CAAC,GAAG,CAAL,CAAjB,EAAyB;AACrBP,QAAAA,IAAI,CAACG,IAAD,EAAOI,CAAP,EAAUA,CAAC,GAAG,CAAd,CAAJ,CADqB,CAErB;;AACAT,QAAAA,UAAU,CAACM,KAAD,EAAQD,IAAR,EAAcJ,UAAU,CAACK,KAAD,CAAxB,EAAiC,EAAjC,EAAqC,CAACG,CAAD,EAAIA,CAAC,GAAG,CAAR,CAArC,CAAV;AACH;AACJ,KAViC,CAYlC;;;AACAT,IAAAA,UAAU,CAACM,KAAD,EAAQD,IAAR,EAAc,CACpB,GAAGJ,UAAU,CAACK,KAAD,CADO,EAEpBD,IAAI,CAACG,MAAL,GAAc,CAAd,GAAkBD,CAFE,CAAd,CAAV;AAIH;;AAED,SAAOD,KAAP;AACH,CAzBD;;KAAMF,U;AA2BN,OAAO,MAAMM,aAAa,GAAGP,SAAS,CAAC,WAAD,EAAc,UAAd,CAA/B;AAEP,OAAO,MAAMQ,cAAc,GAAG;AAC1BC,EAAAA,KAAK,EAAE,aADmB;AAE1BC,EAAAA,WAAW,eACP;AAAA,4BACE;AACE,MAAA,IAAI,EAAC,2CADP;AAEE,MAAA,MAAM,EAAC,QAFT;AAGE,MAAA,GAAG,EAAC,qBAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAOO,GAPP;AAAA;AAAA;AAAA;AAAA;AAAA,UAHsB;AAcxBC,EAAAA,SAAS,eACP;AAAA,mCACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADL;AAAA;AAAA;AAAA;AAAA;AAAA,UAfsB;AAmBxBC,EAAAA,OAAO,eACL;AAAA,mCACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADL;AAAA;AAAA;AAAA;AAAA;AAAA,UApBsB;AAwBxBC,EAAAA,QAAQ,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAxBc;AAyBxBC,EAAAA,KAAK,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzBiB,CAAvB;AA4BP,eAAeb,UAAf","sourcesContent":["import React from 'react';\nimport { newTrace, addToTrace, lastSorted, swap, createKey } from './helpers';\n\nconst BubbleSort = (nums) => {\n    // setup code for tracing the algo\n    const trace = newTrace(nums);\n\n    // bubble sort algo with trace capture\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length - i - 1; j++) {\n            // visualize - compare A[j] and A[j + 1]\n            addToTrace(trace, nums, lastSorted(trace), [j, j + 1]);\n\n            if(nums[j] > nums[j + 1]){\n                swap(nums, j, j + 1);\n                // visualize - swap A[j] and A[j + 1]\n                addToTrace(trace, nums, lastSorted(trace), [], [j, j + 1]);\n            }\n        }\n\n        // visualize - final value is sorted\n        addToTrace(trace, nums, [\n            ...lastSorted(trace),\n            nums.length - 1 - i\n        ]);\n    }\n\n    return trace;\n};\n\nexport const BubbleSortKey = createKey('Comparing', 'Swapping');\n\nexport const BubbleSortDesc = {\n    title: 'Bubble Sort',\n    description: (\n        <p>\n          <a\n            href=\"https://en.wikipedia.org/wiki/Bubble_sort\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Bubble Sort\n          </a>{' '}\n          is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller or larger elements \"bubble\" to the top of the list. Although the algorithm is simple, it is too slow and impractical for most problems\n        </p>\n      ),\n      worstCase: (\n        <span>\n          O(n<sup>2</sup>)\n        </span>\n      ),\n      avgCase: (\n        <span>\n          O(n<sup>2</sup>)\n        </span>\n      ),\n      bestCase: <span>O(n)</span>,\n      space: <span>O(1)</span>\n}\n\nexport default BubbleSort;"]},"metadata":{},"sourceType":"module"}